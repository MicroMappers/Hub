<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		   xmlns:batch="http://www.springframework.org/schema/batch"
		   xmlns:task="http://www.springframework.org/schema/task"
		   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xmlns:context="http://www.springframework.org/schema/context"
		   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/batch
    http://www.springframework.org/schema/batch/spring-batch.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd">



	<import resource="context-model.xml"/>
	<context:component-scan base-package="org.qcri.micromappers"></context:component-scan>

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository"
		  class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="jobLauncher" 	class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>


	<!-- Actual Job Steps -->
	<job id="myJob" xmlns="http://www.springframework.org/schema/batch" restartable="true" job-repository="jobRepository">
		<split id="split1">
			<flow>
				<step id="imagecvstep1" allow-start-if-complete="true" next="imagecvstep2">
					<tasklet ref="ImageAnalyserTaskFetchTasklet"></tasklet>
				</step>
				<step id="imagecvstep2" allow-start-if-complete="true">
					<tasklet ref="ImageAnalysisFetchTasklet"></tasklet>
				</step>
			</flow>
			<flow>
				<step id="snopstep1" allow-start-if-complete="true" next="snopstep2">
					<tasklet ref="SnopesNewsFetchTasklet"></tasklet>
				</step>
				<step id="snopstep2" allow-start-if-complete="true">
					<tasklet ref="SnopesFactFetchTasklet"></tasklet>
				</step>
			</flow>
			<!--<flow>
				<step id="step1" allow-start-if-complete="true" next="step2">
					<tasklet ref="gdeltFetchTasklet"></tasklet>
				</step>
				<step id="step2" allow-start-if-complete="true" next="step3">
					<tasklet transaction-manager="transactionManager">
						<chunk skip-limit="1000" reader="multiResourceItemReader" processor="mmicItemProcessor" writer="databaseItemWriter" commit-interval="100">
							<skippable-exception-classes>
								<include class="org.hibernate.exception.DataException"/>
								<include class="org.postgresql.util.PSQLException"/>
							</skippable-exception-classes>
						</chunk>
						<listeners>
							<listener ref="StepListener" />
						</listeners>
					</tasklet>
				</step>
				<step id="step3" allow-start-if-complete="true" next="step4">
					<tasklet transaction-manager="transactionManager">
						<chunk skip-limit="1000" reader="multiResourceItemReader3W" processor="gdelt3WItemProcessor" writer="databaseItemWriter"
							   commit-interval="100">
							<skippable-exception-classes>
								<include class="org.springframework.batch.item.file.FlatFileParseException"/>
								<include class="org.hibernate.exception.DataException"/>
								<include class="org.postgresql.util.PSQLException"/>
							</skippable-exception-classes>
						</chunk>
						<listeners>
							<listener ref="StepListener3W"/>
						</listeners>
					</tasklet>
				</step>
				<step id="step4" allow-start-if-complete="true" next="step5">
					<tasklet transaction-manager="transactionManager">
						<chunk reader="databaseItemReader" processor="mmicMediaItemProcessor" writer="databaseItemWriter" commit-interval="100" />
					</tasklet>
				</step>
				<step id="step5" allow-start-if-complete="true">
					<tasklet transaction-manager="transactionManager">
						<chunk reader="database3wItemReader" processor="gdelt3wMediaItemProcessor" writer="databaseItemWriter"
							   commit-interval="100"/>
					</tasklet>
				</step>
			</flow>-->

		</split>
	</job>

	<!-- tasklet -->
	<bean id="gdeltFetchTasklet" class="org.qcri.micromappers.batch.tasklet.FetchGdeltMaster"></bean>
	<bean id="SnopesFactFetchTasklet" class="org.qcri.micromappers.batch.tasklet.SnopesFactFetch"></bean>
	<bean id="SnopesNewsFetchTasklet" class="org.qcri.micromappers.batch.tasklet.SnopesNewsFetch"></bean>
	<bean id="ImageAnalysisFetchTasklet" class="org.qcri.micromappers.batch.tasklet.ImageAnalysisFetch"></bean>
	<bean id="ImageAnalyserTaskFetchTasklet" class="org.qcri.micromappers.batch.tasklet.ImageAnalyserTaskFetch"></bean>


	<!-- Multi-ItemReader -->
	<bean id="multiResourceItemReader" class="org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="delegate" ref="flatFileItemReader" />
  	</bean>
	<bean id="multiResourceItemReader3W" class="org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="delegate" ref="flatFile3WItemReader"/>
	</bean>

	<!-- ItemReader reads a complete line one by one from input file -->
	<bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"  scope="step">
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="fieldSetMapper">
					<bean class="org.qcri.micromappers.batch.mapper.GdeltMMICFieldSetMapper" />
				</property>
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="strict" value="false" />
						<property name="delimiter" value="," />
						<property name="names" value="languageCode,articleURL,timestamp,location,lat,lon,imgURL,glidecode" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="flatFile3WItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<!--<property name="resource" value="file:/Users/jlucas/Documents/JavaDev/data/resources/20161204110000.mm3w.json" />-->
		<property name="recordSeparatorPolicy" ref="recordPolicy"/>
		<property name="lineMapper" ref="lineMapper"/>
	</bean>

	<bean id="lineMapper" class="org.qcri.micromappers.batch.mapper.Gdelt3WFieldSetMapper">
		<property name="delegate" ref="lineMapperType"/>
	</bean>
	<bean id="lineMapperType" class="org.springframework.batch.item.file.mapping.JsonLineMapper"/>

	<bean id="recordPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>


	<bean id="databaseItemReader" class="org.springframework.batch.item.database.JpaPagingItemReader">
		<property name="queryString" value="From GdeltMMIC where state = 'insert'"/>
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<bean id="database3wItemReader" class="org.springframework.batch.item.database.JpaPagingItemReader">
		<property name="queryString" value="From Gdelt3W where state = 'insert'"/>
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- ItemWriter which writes data to database -->
  	<bean id="databaseItemWriter" class="org.springframework.batch.item.database.JpaItemWriter">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>


	<!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
	<bean id="mmicItemProcessor" class="org.qcri.micromappers.batch.processor.GdeltMMICProcessor" />
	<bean id="mmicMediaItemProcessor" class="org.qcri.micromappers.batch.processor.GdeltMMICMediaProcessor"/>
	<bean id="gdelt3WItemProcessor" class="org.qcri.micromappers.batch.processor.Gdelt3WProcessor"/>
	<bean id="gdelt3wMediaItemProcessor" class="org.qcri.micromappers.batch.processor.Gdelt3WMediaProcessor"/>


	<!-- Optional JobExecutionListener to perform business logic before and after the job-->
	<bean id="StepListener" class="org.qcri.micromappers.batch.steplistener.GdeltMMICStepListener">
		<property name="filePattern" value="file:${GDELT_DOWNLOADED_LAST_UPDATE_PATH}/*.mmic.txt" />
	</bean>
	<bean id="StepListener3W" class="org.qcri.micromappers.batch.steplistener.Gdelt3WStepListener">
		<property name="filePattern" value="file:${GDELT_JSON_UPDATE_PATH}/*.mm3w.*.json"/>
	</bean>


	<bean id="myScheduler" class="org.qcri.micromappers.batch.scheduler.MyScheduler"/>
	<!-- this is where we are scheduling the job to run using our scheduler every 15 min, note how the method of the
	     scheduler and the cron expression to be used are being specified -->
	<task:scheduled-tasks>
		<task:scheduled ref="myScheduler" method="run" cron="0 0/01 * * * ?"/>
	</task:scheduled-tasks>

</beans>			